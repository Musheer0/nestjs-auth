// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid()) @db.Uuid
  name                  String
  email                 String    @unique
  image                 String?   @default("placeholder.webp")
  image_public_id       String?
  isVerified            DateTime?
  password               String
  phone_number          String?  @unique
  isPhoneNumberVerified DateTime?
  OAuths                OAuth[]
  sessions              Session[]
  isAdmin               Admin?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdByIp           String?
  createdByUserAgent    String?
  country_code          String?
  editInfoTokens        EditUserProfileToken[]
  @@index([email])
  @@index([phone_number])
}



enum Providers {
  GOOGLE
  GITHUB
  X
}

model Admin {
  id                    String    @id @default(uuid()) @db.Uuid
  user_id               String @db.Uuid @unique
  user                  User @relation(fields: [user_id],references: [id],onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdByIp           String?
  createdByUserAgent    String?


}


model OAuth {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid

  provider          Providers
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  user_agent String
  ip         String
  location   String?
  lastUsedAt DateTime? @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expires])
  @@index([userId])
}
enum VerificationType{
  EMAIL
  PHONE
}
model VerificationToken {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  code       String
  expires    DateTime 
  type       VerificationType @default(EMAIL)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier])
}

enum EditAccess{
  PASSWORD
  EMAIL
  IMAGE
  NAME
}
model EditUserProfileToken{
  id         String   @id @default(uuid()) @db.Uuid
  identifier_id String  @db.Uuid
  identifier  User @relation(references: [id],fields: [identifier_id], onDelete: Cascade)
  code       String
  expires    DateTime 
  type       EditAccess @default(PASSWORD)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier_id])
}
